$colorEmpty: linear-gradient(
	105deg,
	rgba(0, 0, 0, 0.4) 0%,
	rgba(88, 87, 85, 0.4) 25%,
	rgba(69, 68, 67, 0.4) 50%,
	rgba(88, 87, 85, 0.4) 75%,
	rgba(0, 0, 0, 0.4) 100%
);
$colorFill: rgba(156, 211, 219, 0.8);

// Using static mixin

@mixin fillUp {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	background: $colorFill;
	transform-origin: 50% 100%;
	animation: cubeFill 4s ease infinite alternate;
}

body {
	background: #708090;
}

// use only the available space inside the 400x400 frame
.frame {
	position: absolute;
	top: 50%;
	left: 50%;
	width: 400px;
	height: 400px;
	margin-top: -200px;
	margin-left: -200px;
	border-radius: 2px;
	box-shadow: 4px 8px 16px 0 rgba(0, 0, 0, 0.1);
	overflow: hidden;
	background: #d3d3d3;
	perspective: 600px;
}

.center {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

.cube-container {
	position: relative;
	cursor: pointer;
	width: 120px;
	height: 120px;
	transform-style: preserve-3d;
	transform: rotateX(12.5deg) rotateY(37.5deg);
	animation: spin 25s linear infinite;

	&:hover {
		animation-play-state: paused;
		animation: jump 0.8s linear infinite alternate;

		.front-side:after {
			position: absolute;
			content: "Hello";
			color: #d3d3d3;
			padding-top: 60px;
			font-size: 24px;
		}

		.bottom-side {
			box-shadow: 20px 40px 30px 15px rgba(0, 0, 0, 0.3);
		}
	}

	.cube {
		position: absolute;
		width: inherit;
		height: inherit;
		border: solid 1px rgba(0, 0, 0, 0.3);
		background: $colorEmpty;
	}

	.front-side {
		transform: translate3d(0, 0, 60px);

		&:before {
			@include fillUp;
		}
	}

	.right-side {
		transform: rotateY(90deg) translate3d(0, 0, 60px);

		&:before {
			@include fillUp;
		}
	}

	.back-side {
		transform: rotateY(180deg) translate3d(0, 0, 60px);

		&:before {
			@include fillUp;
		}
	}

	.left-side {
		transform: rotateY(-90deg) translate3d(0, 0, 60px);

		&:before {
			@include fillUp;
		}
	}

	.top-side {
		transform: rotateX(90deg) translate3d(0, 0, 60px);
	}

	.bottom-side {
		background: $colorFill;
		transform: rotateX(-90deg) translate3d(0, 0, 60px);
		box-shadow: 0px 0px 15px rgba(0, 0, 0, 1);
	}
}

@keyframes spin {
	from {
		transform: rotateX(12.5deg) rotateY(0deg);
	}
	to {
		transform: rotateX(12.5deg) rotateY(-360deg);
	}
}

@keyframes jump {
	from {
		transform: rotateX(12.5deg) rotateY(27.5deg) translateY(0px);
	}
	to {
		transform: rotateX(12.5deg) rotateY(27.5deg) translateY(-20px);
	}
}

@keyframes cubeFill {
	0%,
	25% {
		transform: scaleY(0);
	}
	75%,
	100% {
		transform: scaleY(1);
	}
}

// Playing around with SASS mixin from Hugo - decided to use mixin static in the end: https://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/

// @mixin position($position, $args:()){
// 	$offsets: top right bottom left;
// 	position: $position;

// 	@each $offset in $offsets {
// 		$i: index($args, $offset);

// 		@if $i {
// 			@if $i == length($args) {
// 			#{$offset}: 0;
// 		}
// 			@else {
// 				$next: nth($args, $i + 1);
// 				@if is-valid-length($next){
// 					#{$offset}: $next;
// 				}
// 				@else if index($offsets, $next){
// 					#{$offset}: 0;
// 				}
// 				@else {
// 					@warn "Invalid value '#{$next}' for offset '#{$offset}'.";
// 				}
// 			}
// 		}
// 	}
// }

// @function is-valid-lengnth($value){
// 	@return (type-of($value) == "number" and not unitless($value)) or (index(auto initial inherit 0, $value) != false);
// }

// @mixin absolute($args:()){
// 	@include position(absolute, $args);
// }

// @mixin relative($args:()){
// 	@include position(relative, $args);
// }
